buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.15.2'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def versionMajor = 4
def versionMinor = 0
def versionRevision = 0

android {
    signingConfigs {
        betaConfig {
            storeFile file('./.signing/keystore-beta.jks')
            println project.property("signing")
            if (project.hasProperty("signing") && file(project.property("signing")).exists()) {
                Properties signingProperties = new Properties()
                signingProperties.load(new FileInputStream(file(project.property("signing"))))

                keyAlias signingProperties["keyAliasBeta"]
                keyPassword signingProperties["keyPasswordBeta"]
                storePassword signingProperties["storePasswordBeta"]
            } else {
                keyAlias System.getenv('SIGN_KEY_ALIAS_BETA')
                keyPassword System.getenv('SIGN_KEY_PASSWORD_BETA')
                storePassword System.getenv('SIGN_STORE_PASSWORD_BETA')
            }
        }
    }
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.sloydev.sevibus"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode versionMajor * 1000000 + versionMinor * 1000 + versionRevision
        versionName versionMajor + "." + versionMinor + "." + versionRevision + snapshotSuffix()
        archivesBaseName = "SeviBus-" + versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.betaConfig
            ext.betaDistributionReleaseNotesFilePath = "release_notes.md"
            ext.betaDistributionGroupAliases = "betatesters"
        }
        debug {
            def buildBranch = getCurrentBranch()
            def buildIdentifier = getBuildIdentifier()
            ext.betaDistributionReleaseNotes = "Under development. Branch $buildBranch, build $buildIdentifier"
            ext.betaDistributionGroupAliases = "developers"
        }
    }
    lintOptions {
        disable 'InvalidPackage'
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    def domainLayer = project(':domain')
    def dataLayer = project(':data')

    compile domainLayer
    compile dataLayer

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    compile 'com.squareup.picasso:picasso:2.3.2'
    compile 'com.jakewharton:butterknife:5.1.1'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'

    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile 'org.assertj:assertj-core:1.7.0'
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('crashlytics.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        def apiSecret = System.getenv('crashlyticsApisecret')
        ant.propertyfile(file: "crashlytics.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: apiSecret)
        }
    }
}

task distributeDeveloperBuild << {
    crashlyticsUploadDistributionDebug.execute()
}

task distributeBetatesterBuild << {
    crashlyticsUploadDistributionRelease.execute()
}

//region Git and Travis methods
def getCurrentBranch() {
    if (System.getenv('TRAVIS_BRANCH')) {
        def pullRequest = System.getenv("TRAVIS_PULL_REQUEST")
        return (pullRequest as Boolean) ? "[pull-request $pullRequest]" : System.getenv('TRAVIS_BRANCH')
    } else {
        return getWorkingBranch()
    }
}

def getWorkingBranch() {
    return """git rev-parse --abbrev-ref HEAD""".execute().text.trim()
}

def getBuildIdentifier() {
    def buildNumber = System.getenv('TRAVIS_BUILD_NUMBER')
    return buildNumber ? "#" + buildNumber : gitCommitSha()
}

def gitCommitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def snapshotSuffix() {
    return System.getenv('TRAVIS_BRANCH') != 'master' ? "-SNAPSHOT" : ""
}
//endregion